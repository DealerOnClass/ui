//
//	Color
//
@function shade($input, $percentage) {
    $output: mix($color-black, $input, $percentage);
    @return $output;
}
@function tint($input, $percentage) {
    $output: mix($color-white, $input, $percentage);
    @return $output;
}
@function check-color($color, $threshold, $over: $color-inverse, $under: $color-white) {
    @if (lightness($color) > $threshold) {
        @return $over; // Lighter backgorund, return dark color
    } @else {
        @return $under; // Darker background, return light color
    }
}
///	mixin that calculates if text needs to be light or dark
///	depending on the background color passed.
///
///	From this W3C document: http://www.webmasterworld.com/r.cgi?f=88&d=9769&url=http://www.w3.org/TR/AERT#color-contrast
///
///	Color brightness is determined by the following formula:
///	((Red value X 299) + (Green value X 587) + (Blue value X 114)) / 1000
///
/// @author David Halford
///
@function check-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);
  $color: white;
  @if abs($color-brightness) < ($light-color/2){
    $color: white;
  } @else {
    $color: black;
  }
  @return $color;
}
//
//	Grid
//
@mixin container() {
	.container {
		margin-right: auto;
		margin-left: auto;
		padding-right: $grid-gutter;
		padding-left: $grid-gutter;
	}
	@each $breakpoint, $size in $breakpoints {
		@media (min-width: #{$size}) {
			.container {
				@if ($size == 544px) {
					max-width: #{$size};
				} @else {
					max-width: calc(#{$size} - #{$grid-gutter * 2});
				}
			}
		}
	}
	.container-fluid {
		margin-right: auto;
		margin-left: auto;
		padding-right: $grid-gutter;
		padding-left: $grid-gutter;
		max-width: 100%;
	}
}
@mixin row() {
	.row {
		margin-right: negative($grid-gutter);
		margin-left: negative($grid-gutter);

		&:after {
			content: "";
			display: table;
			clear: both;
		}
	}
}
@mixin columns() {
	[class*="col-"] {
		padding-right: $grid-gutter;
		padding-left: $grid-gutter;
	}
	@for $i from 1 through $grid-columns {
		.col-xs-#{$i} {
			width: #{($i / $grid-columns) * 100%};
		}
	}
	@if $grid-pull {
		@for $i from 0 through $grid-columns {
			.col-xs-pull-#{$i} {
				right: #{($i / $grid-columns) * 100%};
			}
		}
	}
	@if $grid-push {
		@for $i from 0 through $grid-columns {
			.col-xs-push-#{$i} {
				left: #{($i / $grid-columns) * 100%};
			}
		}
	}
	@if $grid-offset {
		@for $i from 0 through $grid-columns {
			.col-xs-offset-#{$i} {
				margin-left: #{($i / $grid-columns) * 100%};
			}
		}
	}
	@each $breakpoint, $size in $breakpoints {
		@media (min-width: #{$size}) {
			@for $i from 1 through $grid-columns {
				.col-#{$breakpoint}-#{$i} {
					float: left;
					width: #{($i / $grid-columns) * 100%};
				}
			}
			@if $grid-pull {
				@for $i from 0 through $grid-columns {
					.col-#{$breakpoint}-pull-#{$i} {
						right: #{($i / $grid-columns) * 100%};
					}
				}
			}
			@if $grid-push {
				@for $i from 0 through $grid-columns {
					.col-#{$breakpoint}-push-#{$i} {
						left: #{($i / $grid-columns) * 100%};
					}
				}
			}
			@if $grid-offset {
				@for $i from 0 through $grid-columns {
					.col-#{$breakpoint}-offset-#{$i} {
						margin-left: #{($i / $grid-columns) * 100%};
					}
				}
			}
		}
	}
}
//
//	Rhythm
//
@function rhythm($multiplier) {
	$output: ($multiplier * $global-lineheight) * $global-unit;
	@return $output;
}
